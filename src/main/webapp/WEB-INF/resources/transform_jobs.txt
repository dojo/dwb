
dependencies.transformJobs = [[
                // immediately filter the stuff to not be transformed in any way
                function(resource, bc){
                    return(bc.mini && resource.tag.miniExclude) || (!bc.copyTests && resource.tag.test) || (resource.tag.ignore);
                },
                []
            ], 
            [
				// if the tag says just copy, then just copy
				function(resource, bc){
					if (/dijit.*\.png$/.test(resource.src)) {
                        return false;
                    }				
					return resource.tag.copyOnly;
				},
				[]
			],            
            [
                // the synthetic report module
                function(resource, bc){
                    return resource.tag.report;
                },
                ["dojoReport", "insertSymbols", "report"]
            ],[
                // dojo.js, the loader
                function(resource, bc){
                    if(resource.mid=="dojo/dojo"){
                        bc.loader = resource;
                        resource.boots = [];
                        // the loader is treated as an AMD module when creating the "dojo" layer, but and AMD dependency scan won't
                        // work because it's not an AMD module; therefore, initialize deps here and make sure not to do the depsScan transform
                        resource.deps = [];
                        bc.amdResources[resource.mid] = resource;
                        return true;
                    }
                    return false;
                },
                ["read", "dojoPragmas", "hasFindAll", "hasFixup", "writeDojo", "writeOptimized"]
            ],[
                // package has module
                function(resource, bc){
                    if(/^\w+\/has$/.test(resource.mid)){
                        bc.amdResources[resource.mid] = resource;
                        return true;
                    }
                    return false;
                },
                ["read", "dojoPragmas", "hasFindAll", "hasFixup", "depsScan", "hasReport", "depsDump"]
            ],[
                // flattened nls bundles
                function(resource, bc){
                    return !!resource.tag.flattenedNlsBundle;
                },
                ["writeAmd", "writeOptimized"]
            ],[
                // nls resources
                function(resource, bc){
                    if(/\/nls\//.test(resource.mid) ||  /\/nls\/.+\.js$/.test(resource.src)){
                        resource.tag.nls = 1;
                        bc.amdResources[resource.mid] = resource;
                        return true;
                    }
                    return false;
                },
                ["read", "dojoPragmas", "hasFindAll", "hasFixup", "depsScan"]
            ],[
                // synthetic AMD modules (used to create layers on-the-fly
                function(resource, bc){
                    if(resource.tag.synthetic && resource.tag.amd){
                        bc.amdResources[resource.mid] = resource;
                        return true;
                    }
                    return false;
                },
                // just like regular AMD modules, but without a bunch of unneeded transforms
                ["depsScan", "writeAmd", "writeOptimized"]
            ],[
                // synthetic dojo/loadInit! resources
                // FIXME: can't this be added to the previous transform?
                function(resource, bc){
                    if(resource.tag.loadInitResource){
                        bc.amdResources[resource.mid] = resource;
                        return true;
                    }
                    return false;
                },
                // just like regular AMD modules (the next transform job), but without a bunch of unneeded transforms
                []
            ],[
                // AMD module:
                // already marked as an amd resource
                // ...or...
                // not dojo/dojo.js (filtered above), not package has module (filtered above), not nls bundle (filtered above), not test or building test, not build control script or profile script but still a Javascript resource...
                function(resource, bc){
                    if(resource.tag.amd || (/\.js$/.test(resource.src) && (!resource.tag.test || bc.copyTests=="build") && !/\.(bcs|profile)\.js$/.test(resource.src))){
                        bc.amdResources[resource.mid] = resource;
                        return true;
                    }
                    return false;
                },
                ["read", "dojoPragmas", "hasFindAll", "insertSymbols", "hasFixup", "depsScan"]
            ],[
                // Declarative Resource:
                // This resource (usually HTML) should be scanned for declarative dependencies and copied.
                function(resource, bc){
                    return resource.tag.declarative;
                },
                ["read", "dojoPragmas", "depsDeclarative", "write"]
            ],[
                // html file; may need access contents for template interning and/or dojoPragmas; therefore, can't use copy transform
                function(resource, bc){
                    return /\.(html|htm)$/.test(resource.src);
                },
                ["read", "dojoPragmas"]
            ],
            [
                function(resource, bc){
                    if (/\.css$/.test(resource.src) && bc.theme && !resource.src.match(bc.theme + ".css")) {
                        return true;
                    }
                    return false;

                },
                ["read"]
            ],
            [
                // css that are designated to compact
                function(resource, bc){
                    if (/\.css$/.test(resource.src) && bc.theme && resource.src.match(bc.theme + ".css")) {
                        return true;
                    }
                    return false;

                },
                ["read", "optimizeCss", "write"]
            ],[
                function (resource, bc) {
                    if (/dijit.*\.png$/.test(resource.src) && bc.theme) {
                        return true;
                    }
                    return false;
                },
                ["copy"]

            ],[
                // just copy everything else except tests which were copied above iff desired...
                function(resource, bc){
                    return true;
                },
                []
            ]
        ]
